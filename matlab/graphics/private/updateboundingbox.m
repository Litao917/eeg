function bbox = updateboundingbox(filename, verbose)
% UPDATEBOUNDINGBOX Function to update the PostScript Bounding Box to a
% tighter fit, in a ready-to-print generated PostScript file.
%
% UPDATEBOUNDINGBOX(FILENAME) modifies the BoundingBox in the specified
% PostScript or EPS file.
%
% UPDATEBOUNDINGBOX(FILENAME, VERBOSE) modifies the BoundingBox in the
% specified PostScript or EPS file, and displays verbose messages.

% This function uses an option in GhostScript, called bbox, to generate a
% tighter fit for the bounding box than the one generated by the print
% path.  This function calls the GhostScript library to get the new
% bounding box, and then modifies the input file with the new bounding box
% values.

% Copyright 2012-2013 The MathWorks, Inc.

if nargin < 1 || nargin > 2
    error(message('MATLAB:updateboundingbox:InvalidNumberOfInputs'))
end

if nargin == 2 && verbose == 1
    debugMode = 1;
else
    debugMode = 0;
end

if ~exist(filename, 'file')
    error(message('MATLAB:updateboundingbox:NoSuchFile', filename));
end

% Create the GhostScript Parameter file
rsp_file = createParameterFile();
cleanupHandler = onCleanup(@() deleteTemporaryFile(rsp_file));

% Modify file before running through ghostscript to make up for excess
% calls in the generated PostScript, which cause the BoundingBox
% calculation to not be correct.
tempfile = modifyPSForBBoxCalculation(filename);
cleanupHandler2 = onCleanup(@() deleteTemporaryFile(tempfile));

% run ghostscript to determine the bounding box
[s, r] = gscript(['@' rsp_file], tempfile, debugMode, 1);

if (s == 0)
    % ghostscript ran successfully.  Get the new bounding box from the
    % output.
    bbox = getBoundingBoxFromOutput(r);
    
    if debugMode
        disp(bbox);
    end
    
    if ~isempty(bbox)
        % Change the bounding box values in a copy of the original file
        [fileCopy, changed] = createFileCopyWithNewBBox(bbox);
        
        if changed
            if debugMode
                % Move original file to temporary directory first
                movefile(filename, tempdir);
            end
            
            [success, ~] = movefile(fileCopy, filename, 'f');
            if ~success
                error(message('MATLAB:updateboundingbox:FileUpdateFailure', filename));
            end
        else
            if debugMode
                disp('No changes made');
            end
            delete(fileCopy);
        end
    else
        if debugMode
            printDebugMessages()
        end
        error(message('MATLAB:updateboundingbox:GSNoBoundingBox'))
    end
end

if debugMode
    printDebugMessages()
end

% -----------------------------------------------

    function rsp_file = createParameterFile()
        % Create a parameter file with the ghostscript options necessary to
        % evaluate a new BoundingBox setting
        rsp_file = [tempname '.rsp'];
        rsp_fid = fopen(rsp_file, 'W');
        rspFileCleanupHandler = onCleanup(@() closeFile(rsp_fid));
        
        if rsp_fid < 0
            error(message('MATLAB:updateboundingbox:ParameterFileCreation'))
        end
        
        if debugMode
            disp(['Parameter File: ' rsp_file]);
        end
        
        ghostDir = fullfile( matlabroot, 'sys', 'extern', computer('arch'), 'ghostscript' );
        if ~exist(ghostDir, 'dir')
            error(message('MATLAB:ghostscript:DirectoryNotFound', matlabroot))
        end
        
        % build parameter file
        fprintf(rsp_fid, '-dNOPAUSE\n');
        fprintf(rsp_fid, '-dBATCH -q\n');
        fprintf(rsp_fid, '-I"%s"\n', fullfile(ghostDir, 'ps_files', ''));
        fprintf(rsp_fid, '-I"%s"\n', fullfile(ghostDir, 'fonts', ''));
        fprintf(rsp_fid, '-sDEVICE=bbox\n');
    end

% -------------------------------------------

    function bbox = getBoundingBoxFromOutput(gsOutput)
        % Find the tight bounding box setting in the output.  It will look
        % something like:
        % %%BoundingBox: 69 215 544 584
        % %%HiResBoundingBox: 69.605998 215.315993 543.383983 583.001982
        idx = strfind(gsOutput, '%%');
        
        if (numel(idx) == 2)
            % We care only about the BoundingBox line, so take everything
            % between the two PostScript comments, minus 2 characters (the
            % first % and the newline).
            bbox = gsOutput(idx(1,1):idx(1,2)-2);
        else
            % There was an error determining the bounding box
            bbox = [];
        end
    end

% -------------------------------------------

    function tempfile = modifyPSForBBoxCalculation(filename)   
        % This modifies the file by deleting the excess images & image
        % setup, since these seem to prevent ghostscript from properly
        % determining the bounding box.  It also changes some near-white
        % blank backgrounds to white.
        fin_fid = fopen(filename, 'r');
        finCleanupHandler = onCleanup(@() closeFile(fin_fid));
        
        tempfile = [tempname '.ps'];
        fout_fid = fopen(tempfile, 'W');
        foutCleanupHandler = onCleanup(@() closeFile(fout_fid));

        newOutputGen = false;
        
        while ~feof(fin_fid)
            str = fgets(fin_fid);
            
            % Call the appropriate method to update the EPS/PostScript file
            if newOutputGen
                newOutputSettings = handleNewOutputGen(str, fout_fid, newOutputSettings);
            
            elseif any(strfind(str, '%%Creator')) && ...
                    any(strfind(str, 'Apache'))
                newOutputGen = true;
                newOutputSettings = initNewOutputSettings();
            
            % Write out existing setting
            else
                fprintf(fout_fid, '%s', str);
            end
        end
    end  

% -------------------------------------------

    function newOutputSettings = initNewOutputSettings()
        newOutputSettings.skipLine = false;
        newOutputSettings.imageCount = 0;
        newOutputSettings.checkImages = ispc;
    end

% -------------------------------------------

    function newOutputSettings = handleNewOutputGen(str, fout_fid, newOutputSettings)
%         if newOutputSettings.checkImages && ...
%                 any(strfind(str, '%%EndPageSetup') == 1)
%             fprintf(fout_fid, '%s', str);
%             newOutputSettings.skipLine = true;
        if newOutputSettings.checkImages && ...
                any(strfind(str, '%AXGBeginBitmap') == 1) && ...
                newOutputSettings.imageCount < 4
            newOutputSettings.skipLine = true;
            newOutputSettings.imageCount = newOutputSettings.imageCount+1;
        elseif newOutputSettings.checkImages && ...
                any(strfind(str, '%AXGEndBitmap') == 1)
            newOutputSettings.skipLine = false;
            if newOutputSettings.imageCount == 4
                newOutputSettings.checkImages = false;
            end
%         elseif newOutputSettings.checkImages && ...
%             newOutputSettings.imageCount == 1 && any(strfind(str, 'GR') == 1)
%             % skip this line in the output
        elseif strfind(str, '0.922 0.914 0.929 RC') == 1
            % Convert near-white color to white
            fprintf(fout_fid, '1.0000 1.0000 1.0000 RC\n');
        elseif any(strfind(str, '0.9') == 1) && any(strfind(str, ' GC') > 1)
            % Convert near-white color to white
            fprintf(fout_fid, '1 GC\n');
        elseif strfind(str, '0 0 0 0.003 CC') == 1
            % Convert near-white cmyk color to white
            fprintf(fout_fid, '0 0 0 0 CC\n');
        elseif strfind(str, '0 0 0 0.017 CC') == 1
            % Convert near-white cmyk color to white
            fprintf(fout_fid, '0 0 0 0 CC\n');
        elseif ~newOutputSettings.skipLine
            fprintf(fout_fid, '%s', str);
        end
    end

% -------------------------------------------

    function [fileCopy, changed] = createFileCopyWithNewBBox(bbox)
        % Create a copy of the file with the new bounding box values.
        fin_fid = fopen(filename, 'r');
        finCleanupHandler = onCleanup(@() closeFile(fin_fid));

        fileCopy = [tempname '.ps'];
        fout_fid = fopen(fileCopy, 'W');
        foutCleanupHandler = onCleanup(@() closeFile(fout_fid));

        if debugMode
            disp(['File Copy: ' fileCopy]);
        end
        changed = 0;
        
        while ~feof(fin_fid)
            s = fgets(fin_fid);
            if (strfind(s, '%%BoundingBox') == 1)
                % Replace with new bounding box setting
                % Do we need any sanity checking here?
                fprintf(fout_fid, '%s\n', bbox);
                changed = 1;
            else
                fprintf(fout_fid, '%s', s);
            end
        end        
    end

% -------------------------------------------

    function printDebugMessages()
        disp(getString(message('MATLAB:ghostscript:PRINTDebuggingGHOSTSCRIPTConvertingPSFile', filename)));
        disp(getString(message('MATLAB:ghostscript:PRINTDebuggingGHOSTSCRIPTResponseFile', rsp_file)));
        eval( ['type ' rsp_file] )
        disp(getString(message('MATLAB:ghostscript:GhostscriptSTDOUT', num2str(s))));
        disp(getString(message('MATLAB:ghostscript:GhostscriptSTDERR', r)));
    end

% -------------------------------------------

    function deleteTemporaryFile(rsp_file)
        if exist(rsp_file, 'file')
            delete(rsp_file);
        end
    end
    
% -------------------------------------------

    function closeFile(fileID)
        % closes the specified file during cleanup.  User files will always
        % have an ID > 2.  Ignore any errors caught.
        try
            if (fileID > 2)
                fclose(fileID);
            end
        catch
        end
    end
end

% LocalWords:  bbox ghostscript tempfile rsp NOPAUSE ps RG AXG
