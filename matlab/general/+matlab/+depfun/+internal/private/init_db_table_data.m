function tableData = init_db_table_data
% Initialize a containers.Map describing the database tables.

    tableData = containers.Map;
    
    % Names of the languages that may be associated with a file. Files may
    % have at most one language. Provides some information about the type
    % of data stored in the file.
    tableData('Language') = {...
        'ID INTEGER PRIMARY KEY AUTOINCREMENT', ...
        'Name TEXT UNIQUE' };

    % Types of symbols (built-in, MEX-file, MATLAB function, etc.)
    % recognized by the dependency analysis algorithms.
    tableData('Symbol_Type') = { ...
        'ID INTEGER PRIMARY KEY AUTOINCREMENT' ...
        'Name TEXT UNIQUE' ...
        'Value INTEGER UNIQUE' };
            
    % Types of proxys
    tableData('Proxy_Type') = { ...
        'ID INTEGER PRIMARY KEY AUTOINCREMENT' ...
        'Type INTEGER UNIQUE' ...
        'FOREIGN KEY(Type) REFERENCES Symbol_Type(ID)' };
  
    % Type of environment to which an application may be deployed.
    % Exclusion and inclusion lists vary by target. GUIs that run in the
    % MATLAB target are prohibited in the MCR target, for example.
    tableData('Target') = { ...
        'ID INTEGER PRIMARY KEY AUTOINCREMENT' ...
        'Name TEXT UNIQUE' };
    
    % A named container for files.
    tableData('Component') = { ...
        'ID INTEGER PRIMARY KEY AUTOINCREMENT' ...
        'Name TEXT UNIQUE' ...
        'Location TEXT' ...
        'Version TEXT' ...
        'Release TEXT' };
    
    % Map between files and components.        
    tableData('Component_Membership') = {
        'File INTEGER NOT NULL' ...
        'Component INTEGER NOT NULL' ...        
        'FOREIGN KEY(File) REFERENCES File(ID)' ...
        'FOREIGN KEY(Component) REFERENCES Component(ID)' };
    
    % Names of valid licenses
    tableData('License') = { ...
        'ID INTEGER PRIMARY KEY AUTOINCREMENT' ...
        'Name TEXT'};
    
    % License -> component mapping -- one entry for each license that
    % allows access to a given component.
    tableData('Component_License') = { ...
        'Component INTEGER'...
        'License INTEGER', ...
        'FOREIGN KEY(Component) REFERENCES Component(ID)', ...
        'FOREIGN KEY(License) REFERENCES License(ID)'};
    
    % File system locations -- ordered lists of Path_Items form
    % component paths.
    tableData('Path_Item') = { ...
        'ID INTEGER PRIMARY KEY AUTOINCREMENT', ...
        'Location TEXT'};
    
    % Constructive defintion of a component's path -- operation '+'
    % adds a path item to the component's path, operation '-' removes
    % one.
    tableData('Component_Path_Item') = { ...
        'Component INTEGER', ...
        'Item INTEGER' ...
        'Target INTEGER', ...
        'Operation CHARACTER(1)' ...
        'FOREIGN KEY(Component) REFERENCES Component(ID)', ...
        'FOREIGN KEY(Item) REFERENCES Path_Item(ID)', ...
        'FOREIGN KEY(Target) REFERENCES Target(ID)' };
    
    % Captures inter-component dependencies. The client component
    % depends on (requires) the dependency component. Currently depth
    % is unused.
    tableData('Component_Use_Graph') = { ...
        'ID INTEGER PRIMARY KEY AUTOINCREMENT', ...
        'Client INTEGER' ...
        'Dependency INTEGER', ...
        'Depth INTEGER', ...
        'FOREIGN KEY(Client) REFERENCES File(ID)', ...
        'FOREIGN KEY(Dependency) REFERENCES File(ID)' };

    % A file on the disk. 
    tableData('File') = {...
        'ID INTEGER PRIMARY KEY AUTOINCREMENT' ...
        'Path TEXT UNIQUE' ...
        'Language INTEGER' ...
        'Type INTEGER' ...
        'Symbol TEXT' ...
        'FOREIGN KEY(Language) REFERENCES Language(ID)' ...
        'FOREIGN KEY(Type) REFERENCES Symbol_Type(ID)' };
    
    % Proxy-Principals table
    % Proxy: class constructor/fake class constructor
    % Principals: class methods, class schema, ...
    %             package functions, package schema, etc.
    tableData('Proxy_Principal') = { ...
        'Proxy INTEGER', ...
        'Principal INTEGER', ...
        'FOREIGN KEY(Proxy) REFERENCES File(ID)' ...
        'FOREIGN KEY(Principal) REFERENCES File(ID)' };
    
    % The immediate dependencies of each file. A list, for example,
    % of all the functions mentioned by name in the text of the client file.
    tableData('Level0_Use_Graph') = { ...
        'Client INTEGER' ...
        'Dependency INTEGER' ...
        'FOREIGN KEY(Client) REFERENCES File(ID)' ...
        'FOREIGN KEY(Dependency) REFERENCES File(ID)' };
    
    % All the dependencies of each file. This table flattens the tree
    % represented by the Level0_Use_Graph. Some clients may have hundreds
    % or thousands of dependencies. This is usually the biggest table in
    % any given database.
    tableData('Proxy_Closure') = { ...
        'Client INTEGER' ...
        'Dependency INTEGER' ...
        'FOREIGN KEY(Client) REFERENCES File(ID)' ...
        'FOREIGN KEY(Dependency) REFERENCES File(ID)' };
    
    % Paths of file that cannot be deployed, for one reason or another.
    % Kept separate from the File table for ease of management. (And this
    % way, we know that Exclude_Files never ship.)
    tableData('Exclude_File') = { ...
        'ID INTEGER PRIMARY KEY AUTOINCREMENT' ...
        'Path TEXT UNIQUE' };
    
    % Per-component, per-target exclusion list.
    tableData('Exclusion_List') = { ...
        'Target INTEGER' ...
        'File INTEGER' ...
        'FOREIGN KEY(Target) REFERENCES Target(ID)' ...
        'FOREIGN KEY(File) REFERENCES Exclude_File(ID)' };
    
    % files specified in the [INCLUDE] section in the IXF file
    tableData('Include_File') = { ...
        'ID INTEGER PRIMARY KEY AUTOINCREMENT' ...
        'Path TEXT UNIQUE' };
    
    % Per-component, per-target exclusion list.
    tableData('Inclusion_List') = { ...
        'Component INTEGER' ...
        'Target INTEGER' ...
        'File INTEGER' ...
        'FOREIGN KEY(Component) REFERENCES Component(ID)' ...
        'FOREIGN KEY(Target) REFERENCES Target(ID)' ...
        'FOREIGN KEY(File) REFERENCES Include_File(ID)' };

    %
    % Per-component builtin symbol information
    %

    % A module is a container for symbols. Multiple components may depend 
    % upon the same module.
    tableData('Builtin_Module') = { ...
        'ID INTEGER PRIMARY KEY AUTOINCREMENT' ...
        'Name TEXT' ...
        'Location TEXT' };

    % Every built-in belongs to one and only one module
    tableData('Builtin_Symbol') = { ...
        'ID INTEGER PRIMARY KEY AUTOINCREMENT' ...
        'Symbol TEXT' ...
        'Type INTEGER' ...
        'Module INTEGER' ...
        'FOREIGN KEY(Type) REFERENCES Symbol_Type(ID)' ...
        'FOREIGN KEY(Module) REFERENCES Builtin_Module(ID)' };
    
    tableData('Signature') = { ...
        'ID INTEGER PRIMARY KEY AUTOINCREMENT' ...
        'Signature TEXT UNIQUE' };

    tableData('Builtin_Signature') = { ...
        'Builtin INTEGER', ...
        'Signature INTEGER', ...
        'FOREIGN KEY(Builtin) REFERENCES Builtin_Symbol(ID)' ...
        'FOREIGN KEY(Signature) REFERENCES Signature(ID)' ...
        };

    tableData('Component_Builtin_Module') = { ...
        'Component INTEGER' ...
        'Module INTEGER' ...
        'FOREIGN KEY(Component) REFERENCES Component(ID)' ...
        'FOREIGN KEY(Module) REFERENCES Builtin_Module(ID)' };
    
    tableData('Builtin_Path') = { ...
        'Builtin INTEGER' ...
        'Path INTEGER' ...
        'FOREIGN KEY(Builtin) REFERENCES Builtin_Symbol(ID)' ...
        'FOREIGN KEY(Path) REFERENCES Path_Item(ID)' ...
        };

    %
    % Shared license tables
    %
    %
    % Under a shared license, client files may call shared files, even if
    % there is no license available for the shared files. The client files
    % require their own license, of course.

    % Stores the identifier of and path to the authorized client directory,
    % a directory containing functions which may call shared functions even if
    % there is no license for the feature bound to the compnent that "owns" 
    % the shared functions.
    tableData('Shared_License_Client') = { ...
        'ID INTEGER PRIMARY KEY AUTOINCREMENT' ...
        'Name TEXT UNIQUE', ...
        'Path TEXT', ...
        'Component INTEGER', ...
        'FOREIGN KEY(Component) REFERENCES Component(ID)' ...
        };

    % Each row grants identifies a file in the given shared license client.
    tableData('Authorized_Client_Functions') = { ...
        'File INTEGER', ...
        'Client INTEGER', ...
        'FOREIGN KEY(File) REFERENCES File(ID)', ...
        'FOREIGN KEY(Client) REFERENCES Shared_License_Client(ID)' ...
        };

    % Each row grants permission for File to be called by any functions
    % in the Authorized_Client_Functions table that have the given
    % Shared_License_Client ID.
    tableData('Shared_Functions') = { ...
        'File INTEGER', ...
        'Client INTEGER', ...
        'Provider INTEGER', ...
        'FOREIGN KEY(File) REFERENCES File(ID)', ...
        'FOREIGN KEY(Client) REFERENCES Shared_License_Client(ID)', ...
        'FOREIGN KEY(Provider) REFERENCES Shared_License_Provider(ID)' ...
        };

    tableData('Shared_License_Provider') = { ...
        'ID INTEGER PRIMARY KEY AUTOINCREMENT' ...
        'Feature INTEGER', ...
        'Path Text', ...
        'Component INTEGER', ...
        'FOREIGN KEY(Feature) REFERENCES License(ID)', ...
        'FOREIGN KEY(Component) REFERENCES Component(ID)' ...
        };

    tableData('Protected_Location') = { ...
        'Feature INTEGER', ...
        'Path Text', ...
        'Component INTEGER', ...
        'FOREIGN KEY(Feature) REFERENCES License(ID)', ...
        'FOREIGN KEY(Component) REFERENCES Component(ID)' ...
        };
end
