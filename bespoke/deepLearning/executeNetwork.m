function [ output_args ] = executeNetwork( x, t )
%EXECUTENETWORK Summary of this function goes here
%   Detailed explanation goes here

if(~exist('x'))
  [x, t] = getData({'CAPS'});
end


% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 05-Jul-2016 14:31:45
%
% This script assumes these variables are defined:
%
%   inputData - input data.
%   outputData - target data.
tic;

x = x;
t = t;

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.

% Create a Fitting Network
hiddenLayerSize = repmat(500,1,6);
net = fitnet(hiddenLayerSize,trainFcn);
net.trainParam.max_fail = 100;

% Choose Input and Output Pre/Post-Processing Functions
% For a list of all processing functions type: help nnprocess
net.input.processFcns = {'removeconstantrows','mapminmax'};
net.output.processFcns = {'removeconstantrows','mapminmax'};

% Setup Division of Data for Training, Validation, Testing
% For a list of all data division functions type: help nndivide
net.divideFcn = 'divideblock';  % Divide data into blocks (because you want all data from the same patient in one group)
net.divideMode = 'sample';  % Divide up every sample
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 20/100;
net.divideParam.testRatio = 10/100;

% Choose a Performance Function
% For a list of all performance functions type: help nnperformance
net.performFcn = 'mse';  % Mean Squared Error

% Choose Plot Functions
% For a list of all plot functions type: help nnplot
net.plotFcns = {'plotperform','plottrainstate','ploterrhist', ...
  'plotregression', 'plotfit'};


% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)

displayOutput = [1]; %CAPS
%displayOutput = [2]; %BDI
%displayOutput = [1,2]; %both

outputMask = NaN(size(y,1),1);
outputMask(displayOutput) = 0;

% for i = 1:size(y, 2)
%   tr.trainMask{1}(:, i) = tr.trainMask{1}(:,i) + outputMask;
%   tr.testMask{1}(:, i) = tr.testMask{1}(:,i) + outputMask;
%   tr.valMask{1}(:, i) = tr.valMask{1}(:,i) + outputMask;
% end

% Recalculate Training, Validation and Test Performance
trainTargets = t .* tr.trainMask{1};
valTargets = t .* tr.valMask{1};
testTargets = t .* tr.testMask{1};
trainPerformance = perform(net,trainTargets,y)
valPerformance = perform(net,valTargets,y)
testPerformance = perform(net,testTargets,y)

% View the Network
%view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)

%figure, plotregression(t,y)
close all;


yTrain = y .* tr.trainMask{1};
yTest = y .* tr.testMask{1};
yVal = y .* tr.valMask{1};
figure, plotregression(trainTargets, yTrain)
oldTitle = get(gca, 'Title');
title(strcat('training', oldTitle.String));
figure, plotregression(testTargets, yTest)
oldTitle = get(gca, 'Title');
title(strcat('test', oldTitle.String));
figure, plotregression(valTargets, yVal)
oldTitle = get(gca, 'Title');
title(strcat('validation', oldTitle.String));
%title('validation');
tilefigs;

%figure, plotfit(net,x,t)

% Deployment
% Change the (false) values to (true) to enable the following code blocks.
% See the help for each generation function for more information.
if (false)
  % Generate MATLAB function for neural network for application
  % deployment in MATLAB scripts or with MATLAB Compiler and Builder
  % tools, or simply to examine the calculations your trained neural
  % network performs.
  genFunction(net,'myNeuralNetworkFunction');
  y = myNeuralNetworkFunction(x);
end
if (false)
  % Generate a matrix-only MATLAB function for neural network code
  % generation with MATLAB Coder tools.
  genFunction(net,'myNeuralNetworkFunction','MatrixOnly','yes');
  y = myNeuralNetworkFunction(x);
end
if (false)
  % Generate a Simulink diagram for simulation or deployment with.
  % Simulink Coder tools.
  gensim(net);
end

toc;

end

